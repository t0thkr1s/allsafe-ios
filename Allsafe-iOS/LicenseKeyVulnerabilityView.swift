import SwiftUI

struct LicenseKeyVulnerabilityView: View {
    @State private var licenseKey: String = ""
    @State private var validationResult: String = ""
    @State private var isValidationInProgress = false
    @State private var showSuccessDialog = false
    
    var body: some View {
        VStack(spacing: 24) {
            LicenseChallengeHeaderView()
            LicenseMissionBriefingView()
            LicenseValidationView(licenseKey: $licenseKey, validationResult: $validationResult, isValidationInProgress: $isValidationInProgress, validateAction: performLicenseValidation)
            
            Spacer()
        }
        .padding()
        .background(Color.black)
        .alert("License Validated!", isPresented: $showSuccessDialog) {
            Button("OK", role: .cancel) { }
        } message: {
            Text("FLAG{license_key_bypass_success_f1ag}")
        }
    }
    
    private func performLicenseValidation() {
        isValidationInProgress = true
        validationResult = ""
        
        DispatchQueue.main.asyncAfter(deadline: .now() + 1.5) {
            isValidationInProgress = false
            
            if validateLicense() {
                validationResult = "[SUCCESS] License validated successfully!"
                showSuccessDialog = true
            } else {
                validationResult = "[FAILED] Invalid license key. Please check your key and try again."
            }
        }
    }
    
    private func validateLicense() -> Bool {
        let validKeys = ["VALID-ALLSAFE-LICENSE-2024", "DEMO-KEY-12345"]
        return validKeys.contains(licenseKey)
    }
}

struct LicenseChallengeHeaderView: View {
    var body: some View {
        VStack(spacing: 12) {
            Text("[CHALLENGE 06]")
                .font(.system(size: 14, weight: .medium, design: .monospaced))
                .foregroundColor(.green)
                .tracking(2)
            
            Text("LICENSE KEY VALIDATION BYPASS")
                .font(.system(size: 18, weight: .bold, design: .monospaced))
                .foregroundColor(.white)
                .multilineTextAlignment(.center)
            
            Rectangle()
                .fill(Color.green)
                .frame(height: 1)
                .frame(maxWidth: 250)
        }
    }
}

struct LicenseMissionBriefingView: View {
    var body: some View {
        VStack(alignment: .leading, spacing: 8) {
            Text("MISSION BRIEFING:")
                .font(.system(size: 12, weight: .bold, design: .monospaced))
                .foregroundColor(.green)
            
            Text("This application includes a challenge where the license key validation method must be bypassed to reveal the hidden flag. Your mission is to intercept and manipulate the license validation process using Frida scripting.")
                .font(.system(size: 13, design: .monospaced))
                .foregroundColor(.white)
                .lineSpacing(2)
            
            Text("\nTARGET: Bypass license key check and reveal the flag")
                .font(.system(size: 12, weight: .medium, design: .monospaced))
                .foregroundColor(.yellow)
        }
        .padding(16)
        .background(
            RoundedRectangle(cornerRadius: 0)
                .stroke(Color.green, lineWidth: 1)
                .background(Color.black.opacity(0.3))
        )
    }
}

struct LicenseValidationView: View {
    @Binding var licenseKey: String
    @Binding var validationResult: String
    @Binding var isValidationInProgress: Bool
    let validateAction: () -> Void
    
    var body: some View {
        VStack(spacing: 16) {
            Text("LICENSE VALIDATION PORTAL")
                .font(.system(size: 14, weight: .bold, design: .monospaced))
                .foregroundColor(.green)
                .tracking(1)
            
            VStack(spacing: 12) {
                TextField("Enter License Key", text: $licenseKey)
                    .textFieldStyle(RoundedBorderTextFieldStyle())
                    .font(.system(size: 14, design: .monospaced))
                    .autocorrectionDisabled()
                    .textInputAutocapitalization(.characters)
                
                Button(action: validateAction) {
                    HStack {
                        if isValidationInProgress {
                            ProgressView()
                                .scaleEffect(0.8)
                                .progressViewStyle(CircularProgressViewStyle(tint: .black))
                        }
                        Text(isValidationInProgress ? "[VALIDATING...]" : "[VALIDATE LICENSE]")
                            .font(.system(size: 14, weight: .medium, design: .monospaced))
                            .foregroundColor(.black)
                    }
                }
                .disabled(isValidationInProgress || licenseKey.isEmpty)
                .padding(.horizontal, 24)
                .padding(.vertical, 12)
                .background(Color.green)
                .cornerRadius(0)
                
                if !validationResult.isEmpty {
                    Text(validationResult)
                        .font(.system(size: 11, weight: .medium, design: .monospaced))
                        .foregroundColor(validationResult.contains("SUCCESS") ? .green : .red)
                        .multilineTextAlignment(.center)
                        .padding(.top, 8)
                }
            }
        }
        .padding(20)
        .background(
            RoundedRectangle(cornerRadius: 0)
                .stroke(Color.gray, lineWidth: 1)
                .background(Color.black.opacity(0.2))
        )
    }
}

#Preview {
    LicenseKeyVulnerabilityView()
}
