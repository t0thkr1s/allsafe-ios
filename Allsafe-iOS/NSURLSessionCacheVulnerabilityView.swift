//
//  NSURLSessionCacheVulnerabilityView.swift
//  Allsafe-iOS
//
//  Created by KristÃ³f on 2025. 08. 05..
//

import SwiftUI
import Foundation

struct NSURLSessionCacheVulnerabilityView: View {
    @State private var isLoading = false
    @State private var loginResult = ""
    
    var body: some View {
        VStack(spacing: 24) {
            NSURLSessionChallengeHeaderView()
            NSURLSessionMissionBriefingView()
            LoginSimulatorView(isLoading: $isLoading, loginResult: $loginResult, performLogin: performMockLogin)
            
            Spacer()
        }
        .padding()
        .background(Color.black)
        .onAppear {
            setupCacheVulnerability()
        }
    }
    
    private func setupCacheVulnerability() {
        // Pre-cache some sensitive data that will be stored in Cache.db
        let config = URLSessionConfiguration.default
        config.requestCachePolicy = .returnCacheDataElseLoad
        config.urlCache = URLCache.shared
        
        // Create a mock request with sensitive data
        let urlString = "https://api.allsafe-corp.com/auth/login"
        guard let url = URL(string: urlString) else { return }
        
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.setValue("Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9", forHTTPHeaderField: "Authorization")
        
        // Create mock response data with sensitive info
        let responseData = """
        {
            "status": "success",
            "user": {
                "username": "admin@allsafe.com",
                "password": "AllSafe2024!Admin",
                "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkFkbWluIFVzZXIiLCJpYXQiOjE1MTYyMzkwMjJ9",
                "session_id": "sess_4f8b2c1e9d3a5b7f8e9c2d1a4b6e8f3c",
                "api_key": "ak_live_4f8b2c1e9d3a5b7f8e9c2d1a4b6e8f3c",
                "flag": "FLAG{nsurlsession_cache_exposes_secrets_c4ch3}"
            }
        }
        """.data(using: .utf8)!
        
        // Create cached response
        let httpResponse = HTTPURLResponse(
            url: url,
            statusCode: 200,
            httpVersion: nil,
            headerFields: ["Content-Type": "application/json"]
        )!
        
        let cachedResponse = CachedURLResponse(response: httpResponse, data: responseData)
        URLCache.shared.storeCachedResponse(cachedResponse, for: request)
    }
    
    private func performMockLogin() {
        isLoading = true
        loginResult = ""
        
        // Simulate network request that uses cached data
        DispatchQueue.main.asyncAfter(deadline: .now() + 1.5) {
            isLoading = false
            loginResult = "[LOGIN SUCCESS] Session cached to Cache.db"
        }
    }
}

struct NSURLSessionChallengeHeaderView: View {
    var body: some View {
        VStack(spacing: 12) {
            Text("[CHALLENGE 04]")
                .font(.system(size: 14, weight: .medium, design: .monospaced))
                .foregroundColor(.green)
                .tracking(2)
            
            Text("NSURLSESSION CACHE EXPOSURE")
                .font(.system(size: 18, weight: .bold, design: .monospaced))
                .foregroundColor(.white)
                .multilineTextAlignment(.center)
            
            Rectangle()
                .fill(Color.green)
                .frame(height: 1)
                .frame(maxWidth: 250)
        }
    }
}

struct NSURLSessionMissionBriefingView: View {
    var body: some View {
        VStack(alignment: .leading, spacing: 8) {
            Text("MISSION BRIEFING:")
                .font(.system(size: 12, weight: .bold, design: .monospaced))
                .foregroundColor(.green)
            
            Text("NSURLSession automatically caches HTTP requests and responses in the Cache.db database. This application fails to properly configure cache policies, resulting in sensitive authentication data being stored in plaintext. Your mission is to extract the cached authentication data.")
                .font(.system(size: 13, design: .monospaced))
                .foregroundColor(.white)
                .lineSpacing(2)
            
            Text("\nTARGET: Retrieve the flag from NSURLSession Cache.db")
                .font(.system(size: 12, weight: .medium, design: .monospaced))
                .foregroundColor(.yellow)
        }
        .padding(16)
        .background(
            RoundedRectangle(cornerRadius: 0)
                .stroke(Color.green, lineWidth: 1)
                .background(Color.black.opacity(0.3))
        )
    }
}

struct LoginSimulatorView: View {
    @Binding var isLoading: Bool
    @Binding var loginResult: String
    let performLogin: () -> Void
    
    var body: some View {
        VStack(spacing: 16) {
            Text("AUTHENTICATION SIMULATOR")
                .font(.system(size: 14, weight: .bold, design: .monospaced))
                .foregroundColor(.green)
                .tracking(1)
            
            VStack(spacing: 12) {
                Text("This simulates a login request that gets cached by NSURLSession")
                    .font(.system(size: 11, design: .monospaced))
                    .foregroundColor(.gray)
                    .multilineTextAlignment(.center)
                
                Button(action: performLogin) {
                    HStack {
                        if isLoading {
                            ProgressView()
                                .scaleEffect(0.8)
                                .progressViewStyle(CircularProgressViewStyle(tint: .black))
                        }
                        Text(isLoading ? "[AUTHENTICATING...]" : "[SIMULATE LOGIN]")
                            .font(.system(size: 14, weight: .medium, design: .monospaced))
                            .foregroundColor(.black)
                    }
                }
                .disabled(isLoading)
                .padding(.horizontal, 24)
                .padding(.vertical, 12)
                .background(Color.green)
                .cornerRadius(0)
                
                if !loginResult.isEmpty {
                    Text(loginResult)
                        .font(.system(size: 11, weight: .medium, design: .monospaced))
                        .foregroundColor(.green)
                        .multilineTextAlignment(.center)
                }
            }
        }
        .padding(20)
        .background(
            RoundedRectangle(cornerRadius: 0)
                .stroke(Color.gray, lineWidth: 1)
                .background(Color.black.opacity(0.2))
        )
    }
}

#Preview {
    NSURLSessionCacheVulnerabilityView()
}
