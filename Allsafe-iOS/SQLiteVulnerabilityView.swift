//
//  SQLiteVulnerabilityView.swift
//  Allsafe-iOS
//
//  Created by KristÃ³f on 2025. 08. 05..
//

import SwiftUI
import SQLite3

struct SQLiteVulnerabilityView: View {
    @State private var isDataInitialized = false
    @State private var recordCount = 0
    
    var body: some View {
        VStack(spacing: 24) {
            SQLiteChallengeHeaderView()
            SQLiteMissionBriefingView()
            DatabaseStatusView(isInitialized: $isDataInitialized, recordCount: $recordCount, initializeDatabase: initializeDatabase)
            
            Spacer()
        }
        .padding()
        .background(Color.black)
        .onAppear {
            initializeDatabase()
        }
    }
    
    private func initializeDatabase() {
        guard let documentsPath = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first else {
            return
        }
        
        let dbPath = documentsPath.appendingPathComponent("allsafe_secrets.db").path
        var db: OpaquePointer?
        
        // Open/Create database
        if sqlite3_open(dbPath, &db) == SQLITE_OK {
            
            // Create users table
            let createUsersTable = """
                CREATE TABLE IF NOT EXISTS users (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    username TEXT NOT NULL,
                    password TEXT NOT NULL,
                    email TEXT,
                    role TEXT,
                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
                );
            """
            
            // Create secrets table
            let createSecretsTable = """
                CREATE TABLE IF NOT EXISTS secrets (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    secret_key TEXT NOT NULL,
                    secret_value TEXT NOT NULL,
                    category TEXT,
                    description TEXT,
                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
                );
            """
            
            // Create sessions table
            let createSessionsTable = """
                CREATE TABLE IF NOT EXISTS sessions (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    session_token TEXT NOT NULL,
                    api_key TEXT,
                    expires_at DATETIME,
                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
                );
            """
            
            // Execute table creation
            sqlite3_exec(db, createUsersTable, nil, nil, nil)
            sqlite3_exec(db, createSecretsTable, nil, nil, nil)
            sqlite3_exec(db, createSessionsTable, nil, nil, nil)
            
            // Insert sample vulnerable data
            let insertUsers = """
                INSERT OR REPLACE INTO users (id, username, password, email, role) VALUES
                (1, 'admin', 'AllSafe2024!Root', 'admin@allsafe-corp.com', 'administrator'),
                (2, 'service_account', 'Srv!c3Acc0unt#2024', 'service@allsafe-corp.com', 'service'),
                (3, 'backup_user', 'B@ckup_P@ss123', 'backup@allsafe-corp.com', 'backup');
            """
            
            let insertSecrets = """
                INSERT OR REPLACE INTO secrets (id, secret_key, secret_value, category, description) VALUES
                (1, 'database_master_key', 'mk_4f8b2c1e9d3a5b7f8e9c2d1a4b6e8f3c', 'encryption', 'Master encryption key for database'),
                (2, 'api_secret', 'sk_live_51H8b2c1e9d3a5b7f8e9c2d1a4b6e8f3c', 'api', 'Production API secret key'),
                (3, 'jwt_signing_key', 'HS256_super_secret_key_do_not_share', 'auth', 'JWT token signing key'),
                (4, 'ctf_flag', 'FLAG{sqlite_without_encryption_s9876}', 'challenge', 'Hidden CTF flag for penetration testing'),
                (5, 'aws_access_key', 'AKIA4SQLITEEXAMPLE123', 'cloud', 'AWS access credentials');
            """
            
            let insertSessions = """
                INSERT OR REPLACE INTO sessions (id, user_id, session_token, api_key, expires_at) VALUES
                (1, 1, 'sess_admin_4f8b2c1e9d3a5b7f8e9c2d1a4b6e8f3c', 'ak_admin_live_2024', '2024-12-31 23:59:59'),
                (2, 2, 'sess_service_2a1b3c4d5e6f7g8h9i0j1k2l3m4n5o6p', 'ak_service_live_2024', '2024-12-31 23:59:59');
            """
            
            sqlite3_exec(db, insertUsers, nil, nil, nil)
            sqlite3_exec(db, insertSecrets, nil, nil, nil)
            sqlite3_exec(db, insertSessions, nil, nil, nil)
            
            // Count total records
            let countQuery = "SELECT (SELECT COUNT(*) FROM users) + (SELECT COUNT(*) FROM secrets) + (SELECT COUNT(*) FROM sessions)"
            var stmt: OpaquePointer?
            
            if sqlite3_prepare_v2(db, countQuery, -1, &stmt, nil) == SQLITE_OK {
                if sqlite3_step(stmt) == SQLITE_ROW {
                    let count = sqlite3_column_int(stmt, 0)
                    DispatchQueue.main.async {
                        recordCount = Int(count)
                        isDataInitialized = true
                    }
                }
            }
            
            sqlite3_finalize(stmt)
            sqlite3_close(db)
        }
    }
}

struct SQLiteChallengeHeaderView: View {
    var body: some View {
        VStack(spacing: 12) {
            Text("[CHALLENGE]")
                .font(.system(size: 14, weight: .medium, design: .monospaced))
                .foregroundColor(.green)
                .tracking(2)
            
            Text("UNENCRYPTED SQLITE DATABASE")
                .font(.system(size: 18, weight: .bold, design: .monospaced))
                .foregroundColor(.white)
                .multilineTextAlignment(.center)
            
            Rectangle()
                .fill(Color.green)
                .frame(height: 1)
                .frame(maxWidth: 250)
        }
    }
}

struct SQLiteMissionBriefingView: View {
    var body: some View {
        VStack(alignment: .leading, spacing: 8) {
            Text("MISSION BRIEFING:")
                .font(.system(size: 12, weight: .bold, design: .monospaced))
                .foregroundColor(.green)
            
            Text("This application stores sensitive data in an unencrypted SQLite database. The database contains user credentials, API keys, session tokens, and other confidential information. Your objective is to locate and analyze the SQLite database to extract the hidden flag.")
                .font(.system(size: 13, design: .monospaced))
                .foregroundColor(.white)
                .lineSpacing(2)
            
            Text("\nTARGET: Locate and extract the flag from the SQLite database")
                .font(.system(size: 12, weight: .medium, design: .monospaced))
                .foregroundColor(.yellow)
        }
        .padding(16)
        .background(
            RoundedRectangle(cornerRadius: 0)
                .stroke(Color.green, lineWidth: 1)
                .background(Color.black.opacity(0.3))
        )
    }
}

struct DatabaseStatusView: View {
    @Binding var isInitialized: Bool
    @Binding var recordCount: Int
    let initializeDatabase: () -> Void
    
    var body: some View {
        VStack(spacing: 16) {
            Text("DATABASE STATUS")
                .font(.system(size: 14, weight: .bold, design: .monospaced))
                .foregroundColor(.green)
                .tracking(1)
            
            VStack(spacing: 12) {
                HStack {
                    Text("Database Type:")
                        .font(.system(size: 11, design: .monospaced))
                        .foregroundColor(.gray)
                    Spacer()
                    Text("SQLite3")
                        .font(.system(size: 11, design: .monospaced))
                        .foregroundColor(.white)
                }
                
                HStack {
                    Text("Status:")
                        .font(.system(size: 11, design: .monospaced))
                        .foregroundColor(.gray)
                    Spacer()
                    Text(isInitialized ? "[INITIALIZED]" : "[INITIALIZING...]")
                        .font(.system(size: 11, weight: .medium, design: .monospaced))
                        .foregroundColor(isInitialized ? .green : .yellow)
                }
                
                if isInitialized {
                    HStack {
                        Text("Records:")
                            .font(.system(size: 11, design: .monospaced))
                            .foregroundColor(.gray)
                        Spacer()
                        Text("\(recordCount) sensitive records")
                            .font(.system(size: 11, design: .monospaced))
                            .foregroundColor(.white)
                    }
                }
                
                Text("Database contains users, secrets, and session tables with plaintext sensitive data.")
                    .font(.system(size: 10, design: .monospaced))
                    .foregroundColor(.gray)
                    .multilineTextAlignment(.center)
                    .padding(.top, 8)
            }
        }
        .padding(20)
        .background(
            RoundedRectangle(cornerRadius: 0)
                .stroke(Color.gray, lineWidth: 1)
                .background(Color.black.opacity(0.2))
        )
    }
}

#Preview {
    SQLiteVulnerabilityView()
}
