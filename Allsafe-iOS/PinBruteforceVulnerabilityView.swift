//
//  PinBruteForceVulnerabilityView.swift
//  Allsafe-iOS
//
//  Created by Kristóf on 2025. 08. 07..
//

import SwiftUI
import Security

struct PinBruteForceVulnerabilityView: View {
    @State private var enteredPin: String = ""
    @State private var attempts: Int = 0
    @State private var isUnlocked: Bool = false
    @State private var showError: Bool = false
    @State private var showFlagPopup: Bool = false
    @State private var errorMessage: String = ""
    
    // VULNERABILITY: Store PIN in Keychain (but still discoverable)
    private let maxPinLength = 6
    
    var body: some View {
        ZStack {
            VStack(spacing: 24) {
                PinChallengeHeaderView()
                PinMissionBriefingView()
                
                if !isUnlocked {
                    PinInputView(
                        enteredPin: $enteredPin,
                        attempts: $attempts,
                        showError: $showError,
                        errorMessage: $errorMessage,
                        validateAction: validatePin
                    )
                } else {
                    SuccessView()
                }
                
                AttemptsCounterView(attempts: attempts)
                
                if showError {
                    ErrorView(message: errorMessage)
                }
                
                Spacer()
            }
            .padding()
            .background(Color.black)
            .onAppear {
                setupSecurePin()
            }
            
            // Flag Popup Window
            if showFlagPopup {
                FlagPopupView(isPresented: $showFlagPopup)
            }
        }
    }
    
    private func setupSecurePin() {
        // Store PIN in Keychain (vulnerability: still discoverable)
        let pin = "123456"
        let pinData = pin.data(using: .utf8)!
        
        let query: [String: Any] = [
            kSecClass as String: kSecClassGenericPassword,
            kSecAttrAccount as String: "vault_pin",
            kSecAttrService as String: "secure_vault",
            kSecValueData as String: pinData,
            kSecAttrAccessible as String: kSecAttrAccessibleWhenUnlocked
        ]
        
        // Delete existing entry first
        SecItemDelete(query as CFDictionary)
        // Add new entry
        SecItemAdd(query as CFDictionary, nil)
    }
    
    private func validatePin() {
        attempts += 1
        
        if enteredPin.count != maxPinLength {
            showErrorWithDelay("PIN must be 6 digits")
            return
        }
        
        // Simple fallback for demonstration
        let storedPin = "029728"
        
        // Direct comparison
        if enteredPin == storedPin {
            isUnlocked = true
            showError = false
            showFlagPopup = true
        } else {
            showErrorWithDelay("Invalid PIN. Try again.")
        }
        
        enteredPin = ""
    }
    
    private func showErrorWithDelay(_ message: String) {
        withAnimation(.easeInOut(duration: 0.3)) {
            errorMessage = message
            showError = true
        }
        
        DispatchQueue.main.asyncAfter(deadline: .now() + 2.0) {
            withAnimation(.easeInOut(duration: 0.3)) {
                showError = false
            }
        }
    }
}

// MARK: - Component Views

struct PinChallengeHeaderView: View {
    var body: some View {
        VStack(spacing: 12) {
            Text("[CHALLENGE 02]")
                .font(.system(size: 14, weight: .medium, design: .monospaced))
                .foregroundColor(.green)
                .tracking(2)
            
            Text("PIN BRUTE FORCE ATTACK")
                .font(.system(size: 18, weight: .bold, design: .monospaced))
                .foregroundColor(.white)
                .multilineTextAlignment(.center)
            
            Rectangle()
                .fill(Color.green)
                .frame(height: 1)
                .frame(maxWidth: 250)
        }
    }
}

struct PinMissionBriefingView: View {
    var body: some View {
        VStack(alignment: .leading, spacing: 8) {
            Text("MISSION BRIEFING:")
                .font(.system(size: 12, weight: .bold, design: .monospaced))
                .foregroundColor(.green)
            
            Text("This secure vault uses a 6-digit PIN for authentication. Your objective is to bypass the PIN protection and retrieve the hidden flag.")
                .font(.system(size: 13, design: .monospaced))
                .foregroundColor(.white)
                .lineSpacing(2)
                .fixedSize(horizontal: false, vertical: true)
            
            Text("\nTARGET: Unlock the vault and retrieve the flag")
                .font(.system(size: 12, weight: .medium, design: .monospaced))
                .foregroundColor(.yellow)
                .fixedSize(horizontal: false, vertical: true)
        }
        .padding(16)
        .background(
            RoundedRectangle(cornerRadius: 0)
                .stroke(Color.green, lineWidth: 1)
                .background(Color.black.opacity(0.3))
        )
    }
}

struct PinInputView: View {
    @Binding var enteredPin: String
    @Binding var attempts: Int
    @Binding var showError: Bool
    @Binding var errorMessage: String
    let validateAction: () -> Void
    
    private let maxPinLength = 6
    
    var body: some View {
        VStack(spacing: 20) {
            Text("SECURE VAULT ACCESS")
                .font(.system(size: 14, weight: .bold, design: .monospaced))
                .foregroundColor(.green)
                .tracking(1)
            
            // PIN Display
            HStack(spacing: 12) {
                ForEach(0..<maxPinLength, id: \.self) { index in
                    Circle()
                        .fill(index < enteredPin.count ? Color.green : Color.gray.opacity(0.3))
                        .frame(width: 20, height: 20)
                        .overlay(
                            Circle()
                                .stroke(Color.green, lineWidth: 1)
                        )
                }
            }
            .padding(.vertical, 8)
            
            // Number Pad
            VStack(spacing: 12) {
                ForEach(0..<3) { row in
                    HStack(spacing: 16) {
                        ForEach(1..<4) { col in
                            let number = row * 3 + col
                            NumberButton(number: "\(number)") {
                                addDigit("\(number)")
                            }
                        }
                    }
                }
                
                HStack(spacing: 16) {
                    NumberButton(number: "⌫") {
                        removeDigit()
                    }
                    
                    NumberButton(number: "0") {
                        addDigit("0")
                    }
                    
                    NumberButton(number: "✓") {
                        if enteredPin.count == maxPinLength {
                            validateAction()
                        }
                    }
                }
            }
        }
        .padding(20)
        .background(
            RoundedRectangle(cornerRadius: 0)
                .stroke(Color.gray, lineWidth: 1)
                .background(Color.black.opacity(0.2))
        )
    }
    
    private func addDigit(_ digit: String) {
        if enteredPin.count < maxPinLength {
            enteredPin += digit
            
            // Auto-validate when PIN reaches max length
            if enteredPin.count == maxPinLength {
                DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
                    validateAction()
                }
            }
        }
    }
    
    private func removeDigit() {
        if !enteredPin.isEmpty {
            enteredPin.removeLast()
        }
    }
}


struct NumberButton: View {
    let number: String
    let action: () -> Void
    
    var body: some View {
        Button(action: action) {
            Text(number)
                .font(.system(size: 18, weight: .medium, design: .monospaced))
                .foregroundColor(.white)
                .frame(width: 60, height: 60)
                .background(
                    RoundedRectangle(cornerRadius: 0)
                        .stroke(Color.green, lineWidth: 1)
                        .background(Color.black.opacity(0.3))
                )
        }
        .buttonStyle(PlainButtonStyle())
    }
}

struct AttemptsCounterView: View {
    let attempts: Int
    
    var body: some View {
        VStack(spacing: 4) {
            Text("[AUTHENTICATION ATTEMPTS]")
                .font(.system(size: 10, weight: .bold, design: .monospaced))
                .foregroundColor(.gray)
            
            Text("COUNT: \(attempts)")
                .font(.system(size: 12, weight: .medium, design: .monospaced))
                .foregroundColor(attempts > 10 ? .red : .green)
        }
        .padding(8)
        .background(
            RoundedRectangle(cornerRadius: 0)
                .stroke(Color.gray.opacity(0.5), lineWidth: 1)
                .background(Color.black.opacity(0.1))
        )
    }
}

struct ErrorView: View {
    let message: String
    
    var body: some View {
        VStack(spacing: 4) {
            Text("[ACCESS DENIED]")
                .font(.system(size: 10, weight: .bold, design: .monospaced))
                .foregroundColor(.red)
            
            Text(message)
                .font(.system(size: 11, design: .monospaced))
                .foregroundColor(.red)
                .multilineTextAlignment(.center)
        }
        .padding(12)
        .background(
            RoundedRectangle(cornerRadius: 0)
                .stroke(Color.red, lineWidth: 1)
                .background(Color.red.opacity(0.1))
        )
    }
}

struct SuccessView: View {
    var body: some View {
        VStack(spacing: 12) {
            Text("[VAULT UNLOCKED]")
                .font(.system(size: 16, weight: .bold, design: .monospaced))
                .foregroundColor(.green)
                .tracking(1)
            
            Text("🔓")
                .font(.system(size: 48))
            
            Text("CONGRATULATIONS!\nYou have successfully bypassed the PIN protection.")
                .font(.system(size: 12, design: .monospaced))
                .foregroundColor(.white)
                .multilineTextAlignment(.center)
                .lineSpacing(2)
        }
        .padding(24)
        .background(
            RoundedRectangle(cornerRadius: 0)
                .stroke(Color.green, lineWidth: 2)
                .background(Color.green.opacity(0.1))
        )
    }
}

struct FlagPopupView: View {
    @Binding var isPresented: Bool
    
    var body: some View {
        ZStack {
            // Dark overlay
            Color.black.opacity(0.8)
                .edgesIgnoringSafeArea(.all)
                .onTapGesture {
                    withAnimation(.easeInOut(duration: 0.3)) {
                        isPresented = false
                    }
                }
            
            // Popup window
            VStack(spacing: 16) {
                Text("[FLAG CAPTURED]")
                    .font(.system(size: 16, weight: .bold, design: .monospaced))
                    .foregroundColor(.green)
                    .tracking(1)
                
                Text("FLAG{pin_brute_force_keychain_bypass_m8934}")
                    .font(.system(size: 14, weight: .medium, design: .monospaced))
                    .foregroundColor(.yellow)
                    .padding()
                    .background(
                        RoundedRectangle(cornerRadius: 0)
                            .stroke(Color.yellow, lineWidth: 1)
                            .background(Color.black.opacity(0.5))
                    )
                
                Text("Challenge completed successfully!\nTap anywhere to close.")
                    .font(.system(size: 11, design: .monospaced))
                    .foregroundColor(.white)
                    .multilineTextAlignment(.center)
                    .lineSpacing(2)
                
                Button(action: {
                    withAnimation(.easeInOut(duration: 0.3)) {
                        isPresented = false
                    }
                }) {
                    Text("[CLOSE]")
                        .font(.system(size: 12, weight: .medium, design: .monospaced))
                        .foregroundColor(.black)
                        .padding(.horizontal, 20)
                        .padding(.vertical, 8)
                        .background(Color.green)
                }
            }
            .padding(24)
            .background(
                RoundedRectangle(cornerRadius: 0)
                    .stroke(Color.green, lineWidth: 2)
                    .background(Color.black.opacity(0.9))
            )
            .padding(20)
            .transition(.scale.combined(with: .opacity))
        }
    }
}

#Preview {
    PinBruteForceVulnerabilityView()
}
